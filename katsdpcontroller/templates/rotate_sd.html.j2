<!doctype html>
<html>
    <head>
         <title>Signal Display Rotation</title>
    </head>
    <body>
         <iframe id='rotate_frame' style='border: 0; width: {{ width }}px; height: {{ height}}px;'></iframe>
    </body>
    <script>
     var url_id = 0;   // Index in guis to show
     var guis = [];    // List of gui-url objects
     var rotater = null;
     var ws = null;
     var ws_url = null;
     var ws_error = null;
     var restarting = false;
      // protect restarts so that we dont end up with another
      // error triggering a restart during the wait period
     var retry_count = 0;
      // how many times have we tried to reconnect to the
      // websocket in this session

     var rotate_frame = document.getElementById('rotate_frame');
     var no_content = "No arrays containing signal displays currently active.";

     function set_content(content) {
      rotate_frame.src = 'data:text/html,' + encodeURIComponent("<div style='color: #aaaaaa;'>" + content + "</div>");
     }

     function rotate()
     {
      if (guis.length == 0) { set_content(no_content); return; }
      if (guis.length == 1 && rotate_frame.src.startsWith(guis[0].href)) { return; }
       // don't rotate if we have only one to display and are currently showing it
       // or none to dispay

      url = guis[url_id].href;

      conn = new XMLHttpRequest();
      conn.timeout = 1000;
      conn.onreadystatechange = function () {
       if (conn.readyState != 4) { return;}
       if (conn.readyState == 4 && conn.status == 200) {
        console.log("Rotating to frame " + url_id + " : " + url);
        rotate_frame.src = url;
       } else {
        console.log("Unable to connect to " + url + ". It is either down or doesn't support CORS");
        set_content("URL " + url + " is not currently active. Will retry...");
        // check to see if this URL is available yet, and if not let the user
        // know that we will retry.
       }
       url_id = (url_id + 1) % guis.length;
       rotater = setInterval(rotate, {{rotate_interval}});
      }
      clearInterval(rotater);
      console.log("Checking validity of URL: " + url);
      conn.open("GET", url, true);
      conn.send()
     }


     function restart_ws() {
      if (retry_count > 4) {
       console.log("Hit ws retry limit of 5. Reloading page...");
       window.location.reload(true);
      }
      if (restarting) {
       console.log("Not restarting since another restart is underway");
      } else {
       setTimeout(function() { ws_connect(); }, 5000);
        // give it 5 seconds to settle and then try again
       restarting = true;
       retry_count += 1;
      }
     }

     function ws_connect() {
      restarting = false;
      set_content(no_content);
      ws_url = 'ws://' + document.location.host + '/ws';
       // have had issues checking host before the onload event
      console.log("Attempting WS connection to " + ws_url);
      ws = new WebSocket(ws_url);

      ws.onopen = function(msg) {
       console.log("Websocket connected. Requesting active signal displays...");
       ws.send('guis');
       retry_count = 0;
      }

      ws.onclose = function(msg) {
       console.log("Websocket disconnected. Trying a restart...");
       restart_ws();
      }

      ws.onerror = function(error) {
       ws_error = error;
       console.log("WS error: " + error);
       set_content("Failed to establish WebSocket connection to " + ws_url + ". Retrying in 5s...");
       restart_ws();
      }

      ws.onmessage = function(msg) {
       url_id = 0;
       retry_count = 0;
       console.log("Got WS message: " + msg.data);
       clearInterval(rotater);
       rotater = null;
       try {
        new_guis = [];
        products = JSON.parse(msg.data).products;
        for (var product_name of Object.keys(products))
         for (var gui of products[product_name])
          if (gui.service.startsWith("timeplot."))
           new_guis.push(gui);
        guis = new_guis;
        rotater = setInterval(rotate, {{rotate_interval}});
         // waiting the interval gives time for the time_plot endpoint to startup
       } catch (err) {
        console.log("Failed to parse WS message: " + err);
       }
       if (guis.length == 0) { set_content(no_content); }
      }
     } // end of ws_connect

     window.onload = function() { ws_connect(); }
    </script>
</html>

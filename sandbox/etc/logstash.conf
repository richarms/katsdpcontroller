input {
  gelf {
    host => "127.0.0.1"
    remap => false
    type => gelf
  }
}

# These are a subset of what's in katsdpinfrastructure's ansible role
filter {
  # Tasks launched under master controller but not using GELF (e.g. redis)
  if [docker][labels][za_ac_kat_sdp_katsdpcontroller_task] {
    mutate {
      copy => {
        "[docker][labels][za_ac_kat_sdp_katsdpcontroller_task]" => "task"
      }
    }
  }
  if [docker][labels][za_ac_kat_sdp_katsdpcontroller_subarray_product_id] {
    mutate {
      copy => {
        "[docker][labels][za_ac_kat_sdp_katsdpcontroller_subarray_product_id]" => "subarray_product_id"
      }
    }
  }
  if [docker][labels][za_ac_kat_sdp_katsdpcontroller_capture_block_id] {
    mutate {
      copy => {
        "[docker][labels][za_ac_kat_sdp_katsdpcontroller_capture_block_id]" => "capture_block_id"
      }
    }
  }

  if [type] == "gelf" {
    # pygelf outputs exception information in the full_message field, but without
    # the informational message. Thus, we usually want to see both short_message
    # and full_message when full_message exists (this is also why we have
    # remap => false on the gelf input: that would use *only* the full_message
    # when it is present).
    if [full_message] {
      mutate {
        add_field => { "message" => "%{short_message}
%{full_message}" }
      }
    } else {
      mutate {
        copy => { "short_message" => "message" }
      }
    }
  }

  # Turn syslog level into a human-readable level name
  translate {
    field => "level"
    destination => "level_name"
    dictionary => {
      "0" => "EMERG"
      "1" => "ALERT"
      "2" => "CRITICAL"
      "3" => "ERROR"
      "4" => "WARNING"
      "5" => "NOTICE"
      "6" => "INFO"
      "7" => "DEBUG"
    }
  }
}

output {
  file {
    path => "/logstash-logs/log-%{+YYYY-MM-dd}.txt"
    flush_interval => 0
    codec => line { format => "%{@timestamp} %{task} [%{level}] %{short_message}" }
  }

  elasticsearch {
    hosts => ["127.0.0.1"]
    template => "/etc/logstash/elasticsearch-template.json"
    template_overwrite => true
  }
}

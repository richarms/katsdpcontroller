---

version: "2.3"
services:
  exhibitor:
    image: netflixoss/exhibitor:1.5.2
    ports:
      - "127.0.0.1:2181:2181"

  mesos-master:
    network_mode: host
    image: mesosphere/mesos-master:1.5.0
    depends_on:
      - exhibitor
    environment:
      MESOS_IP: 127.0.0.1
      MESOS_PORT: 5050
      MESOS_ZK: zk://127.0.0.1:2181/mesos
      MESOS_QUORUM: 1
      MESOS_REGISTRY: in_memory
      MESOS_LOG_DIR: /var/log/mesos
      MESOS_WORK_DIR: /var/tmp/mesos

  mesos-slave:
    network_mode: host
    pid: host
    image: mesosphere/mesos-slave:1.5.0
    depends_on:
      - exhibitor
    environment:
      MESOS_IP: 127.0.0.1
      MESOS_PORT: 5051
      MESOS_MASTER: zk://127.0.0.1:2181/mesos
      MESOS_CONTAINERIZERS: docker,mesos
      MESOS_DOCKER_CONFIG: file:///etc/mesos/config.json
      MESOS_EXECUTOR_REGISTRATION_TIMEOUT: 5mins
      MESOS_WORK_DIR: /var/tmp/mesos
      MESOS_SYSTEMD_ENABLE_SUPPORT: "false"
    volumes:
      - "${HOME}/.docker/config.json:/etc/mesos/config.json:ro"
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /usr/bin/docker:/usr/local/bin/docker
      - ./etc/mesos-slave:/etc/mesos-slave:ro
      # /var/tmp/mesos needs to be the same on the host and the container,
      # because mesos-slave writes to the sandbox and then tells the host
      # Docker to bind-mount it into the newly started container.
      - /var/tmp/mesos:/var/tmp/mesos
      - ./etc/passwd:/etc/passwd:ro
      - ./etc/group:/etc/group:ro
    entrypoint:
      - /usr/bin/mesos-init-wrapper
      - slave

  singularity:
    network_mode: host
    image: hubspot/singularityservice:1.0.0
    depends_on:
      - mesos-master
      - exhibitor
    volumes:
      - ./etc/singularity/singularity.yaml:/etc/singularity/singularity.yaml:ro

  minio:
    network_mode: host
    image: minio/minio:RELEASE.2018-10-18T00-28-58Z
    command: server --address 127.0.0.1:9000 /data
    volumes:
      - ./minio-data:/data
    environment:
      MINIO_ACCESS_KEY: minioaccesskey
      MINIO_SECRET_KEY: miniosecretkey

  prometheus:
    network_mode: host
    image: quay.io/ska-sa/xrate
    volumes:
      - ./etc/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - "--web.listen-address=127.0.0.1:9090"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"

  grafana:
    network_mode: host
    image: grafana/grafana:6.0.2
    depends_on:
      - prometheus
    environment:
      GF_SERVER_HTTP_ADDR: "127.0.0.1"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Editor"
      GF_PANELS_DISABLE_SANITIZE_HTML: "true"
    volumes:
      - ./etc/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./etc/grafana/dashboards:/var/lib/grafana/dashboards:ro

  logstash:
    network_mode: host
    image: docker.elastic.co/logstash/logstash-oss:7.3.1
    command: logstash -w 1 -f /etc/logstash.conf --http.host 127.0.0.1
    environment:
      - LS_HEAP_SIZE=2048m
    volumes:
      - ./etc/logstash.conf:/etc/logstash.conf:ro
      - ./etc/logstash:/etc/logstash:ro
      - ./logs:/logstash-logs

  elasticsearch:
    network_mode: host
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.3.1
    environment:
      - discovery.type=single-node
      - network.host=127.0.0.1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    network_mode: host
    build:
      context: etc/elk
      dockerfile: Dockerfile.kibana-logtrail
    environment:
      - ELASTICSEARCH_HOSTS=http://127.0.0.1:9200
      - SERVER_HOST=127.0.0.1
    volumes:
      - ./etc/logtrail.json:/usr/share/kibana/plugins/logtrail/logtrail.json

  consul:
    network_mode: host
    image: consul:1.5.2
    command: consul agent -dev -bind=127.0.0.1 -client=127.0.0.1 -config-dir=/etc/consul.d
    volumes:
      - ./etc/consul.d:/etc/consul.d:ro

  poweroff:
    image: quay.io/ska-sa/poweroff_server
    command: "--dry-run"
    ports:
      - "127.0.0.1:9118:8080"

  registry:
    image: registry:2.7.1
    ports:
      - "127.0.0.1:5000:5000"
    volumes:
      - registry_data:/var/lib/registry

volumes:
  prometheus_data: {}
  elasticsearch_data: {}
  registry_data: {}
